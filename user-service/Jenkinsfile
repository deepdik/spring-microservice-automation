pipeline {
  agent any

  environment {
    AWS_ACCOUNT_ID = '051826736527'
    REGION = 'us-east-2'
    ECR_REPO = 'user-service'
    IMAGE_TAG = "latest"
    IMAGE_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/deepdik/spring-microservice-automation.git'
      }
    }

    stage('Build user-service JAR') {
      steps {
        dir('user-service') {
          sh './mvnw clean package -DskipTests'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh '''
          docker build -t $IMAGE_URI ./user-service
        '''
      }
    }

    stage('Login to ECR') {
      steps {
        sh '''
          aws ecr get-login-password --region $REGION | \
          docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
        '''
      }
    }

    stage('Push to ECR') {
      steps {
        sh 'docker push $IMAGE_URI'
      }
    }

    stage('Configure kubeconfig for EKS') {
      steps {
        sh '''
          aws eks update-kubeconfig --region $REGION --name spring-microservices-cluster
          kubectl get nodes
        '''
      }
    }

    stage('Deploy to EKS with Helm') {
      steps {
        sh '''
          helm upgrade --install user-service ./helm-deployments/user-service --namespace default \
          --set image.repository=${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO} \
          --set image.tag=${IMAGE_TAG}
        '''
      }
    }

    stage('Logout from Docker') {
      steps {
        sh 'docker logout ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com'
      }
    }
  }

  post {
    always {
      sh 'docker system prune -f'
    }
  }
}
